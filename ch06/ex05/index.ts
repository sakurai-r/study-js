const obj1 = {
  0: 1,
  a: "hoge",
  8: 2,
  b: "faga",
};

const obj2 = Object.create(obj1);
obj2[-4] = "yon";
obj2.c = 3;
obj2[1] = "eee";

Object.defineProperty(obj2, "a", {
  value: "bbb",
  enumerable: false,
});

for (const i in obj2) {
  console.log(`${i}: ${obj2[i]}`);
}

/**
 * 1: eee
 * -4: yon
 * c: 3
 * 0: 1
 * 8: 2
 * b: faga
 */

/**
 * 文字列の名前がついたプロパティのうち、プロパティ名が非負の整数のものは最初に
 * 挙されます。数値として値が小さいものから順に列挙されます。この規則により、配
 * や配列のようなオブジェクトの場合に、プロパティが順序通り列挙されるようになります
 * 配列のインデックスに見えるプロパティをすべて列挙した後には、プロパティ名が文字
 * 列のプロパティを列挙します（負数や浮動小数点数のような名前がついたプロパティも
 * 列挙されます）。このプロパティについては、オブジェクトに追加された順番で列挙さ
 * れます。オブジェクトリテラルでプロパティを定義していた場合は、リテラル中に記述
 * された順番で列挙されます。
 * 最後に、プロパティ名がSymbol のプロパティが列挙されます。このプロパティも、オ
 * ブジェクトに追加された順番で列挙されます。
 * 一般的な処理系では、先ほど紹介した順序で独自プロパティを列挙します。
 * その後、プロトタイプチェーンをたどっていき、各プロトタイプオブジェクトに対し
 * 同じ順番でプロパティを列挙していきます。ただし、注意してほしいのですが、同じ名
 * 前のプロパティが既に列挙されていた場合は、そのプロパティは列挙されません。また、
 * 同じ名前のプロパティが列挙不可で列挙されていなかった場合でも、そのプロパティは
 * 列挙されません。
 */
